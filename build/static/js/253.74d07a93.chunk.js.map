{"version":3,"file":"static/js/253.74d07a93.chunk.js","mappings":"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","sources":["layout/Dashboard/components/Announcement.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport '../css/styles.css'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {imageUrl} from '../../../common/apis' \nimport { useDispatch, useSelector } from \"react-redux\";\nimport {announceDataFormSubmission,dashboardSelector} from \"../../../slices/Dashboard/dashboard\";\nimport { useParams , Link , useNavigate} from \"react-router-dom\";\nimport {getAnnouncement} from '../../../slices/api/simpleApi'\nimport { toast } from \"react-toastify\";\n\nconst Announcement = () => {\n    \n    const dispatch = useDispatch();\n\n    const { id } = useParams();\n    const token = localStorage.getItem(\"token\");\n\n    const {message,} = useSelector(dashboardSelector);\n    let navigate = useNavigate();\n\n    useEffect(()=>{\n        toast.success(message)\n    },[message])\n\n    useEffect(() => {\n        const callback = (data) => {\n            if(data.length){\n                setAnnouncement( () => {\n                    return {\n                        ...announcement,\n                        title: data[0].title,\n                        description: data[0].description,\n                        start_date: data[0].start_date,\n                        end_date: data[0].end_date,\n                        social_platform: data[0].social_platform,\n                        imageUrl: data[0].image\n                    };\n                });\n            }\n        };\n        getAnnouncement(callback, token , id);\n    }, []);\n\n    const [announcement , setAnnouncement] = useState({\n        title: '',\n        description: '',\n        start_date: '',\n        end_date: '',\n        social_platform: '',\n        Image: '',\n        imageUrl: ''\n    });\n\n    const [selectedFile, setSelectedFile] = useState();    \n\n    const [startDate, setStartDate] = useState();\n    const [endDate, setEndDate] = useState();\n    const [error, setError] = useState({\n        title: 0,\n        description: 0,\n        start_date: 0,\n        end_date: 0,\n        social_platform: 0,\n    });\n\n    useEffect(() => {\n        if(!startDate)\n            return;\n        let date = new Date(startDate);\n        let dateStartTime = date.toLocaleTimeString();\n        let mnth = (\"0\" + (date.getMonth() + 1)).slice(-2);\n        let day = (\"0\" + date.getDate()).slice(-2);\n        let finalDate = [date.getFullYear(), mnth, day].join(\"-\");\n\n        setAnnouncement(() => {\n            return {\n                ...announcement,\n                start_date: finalDate + ' ' + dateStartTime,\n            };\n        });\n    }, [startDate]);\n\n    useEffect(() => {\n        if(!endDate)\n            return;\n        let date = new Date(endDate);\n        let dateEndTime = date.toLocaleTimeString();\n        let mnth = (\"0\" + (date.getMonth() + 1)).slice(-2);\n        let day = (\"0\" + date.getDate()).slice(-2);\n        let finalDate = [date.getFullYear(), mnth, day].join(\"-\");\n\n        setAnnouncement(() => {\n          return {\n            ...announcement,\n            end_date: finalDate + ' '+ dateEndTime,\n          };\n        });\n    }, [endDate]);\n\n    const handleChange = (e) => {\n        setAnnouncement({ ...announcement, [e.target.name]: e.target.value });\n\n        if (e.target.name == \"userImage\") {\n            const file = e.target.files[0];\n            if (file.size > 1000000) {\n                console.log(\"File is large\");\n                return;\n            }\n            setSelectedFile(e.target.files[0]);\n        }\n\n        return false;\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        let date = new Date(startDate);\n\n        let mnth = (\"0\" + (date.getMonth() + 1)).slice(-2);\n        let day = (\"0\" + date.getDate()).slice(-2);\n        const finalDate = [date.getFullYear(), mnth, day].join(\"-\");\n        \n\n        setAnnouncement({ ...announcement, 'start_date' : finalDate });\n        let a = {}\n        for (const announcementKey in announcement) {\n            if(announcement[announcementKey] == '' || announcement[announcementKey] == undefined){\n                a[announcementKey] = 1\n                setError({\n                    ...a\n                })\n            }\n        }\n\n        for (let key in error) { \n            if (error[key] == 0) {\n                toast.error(\"Please fill details\");\n                return;\n            }\n        }\n\n        const formData = new FormData();\n        formData.append(\"image\", selectedFile);\n        formData.append(\"title\", announcement.title);\n        formData.append(\"description\", announcement.description);\n        formData.append(\"start_date\", announcement.start_date);\n        formData.append(\"end_date\", announcement.end_date);\n        formData.append(\"social_platform\", announcement.social_platform);\n        \n        //Submit data\n        dispatch(announceDataFormSubmission(formData));\n        navigate('../../dashboard/announcement/list');\n        // toast.success(message)\n    }    \n\n    return <>\n        <div className=\"row col-12\">\n            <div className=\"col-6\">\n                <h3 className=\"mt-4\">Add Announcement</h3>\n            </div>\n            <div className=\"col-6\">\n                { id && <Link to={`/dashboard/announcement/view/${id}`}>View</Link> }\n            </div>\n        </div>\n\n        <div className=\"row\">\n            <form className=\"dashboard-main-form\" onSubmit={handleSubmit}>\n                <div className=\"row mt-3\">\n                    <div className=\"col-6\">\n                        <label className=\"form-label\">\n                        <b>Title</b>\n                        </label>\n                        <input type=\"text\" className=\"form-control\" \n                            value={announcement.title} onChange={handleChange} name='title'\n                        />\n                        { error.title == 1 ? <span className=\"error-show\">Please fill valid title</span> : null}\n                    </div>\n                    <div className=\"col-6 \">\n                        <label className=\"form-label\">\n                        <b>Social Media Platform</b>\n                        </label>\n                        <input type=\"text\" className=\"form-control\" value={announcement.social_platform} onChange={handleChange} name='social_platform'/>\n                        { error.social_platform == 1 ? <span className=\"error-show\">Please fill valid social Media</span> : null}\n                    </div>\n                </div>\n                <div className=\"row mt-3\">\n                    <div className=\"col-6\">\n                        <label className=\"form-label\">\n                            <b>Start Date</b>\n                        </label>\n                        <DatePicker\n                            selected={startDate}\n                            name=\"start_date_time\"\n                            onChange={(date) => setStartDate(date)}\n                            timeInputLabel=\"Time:\"\n                            dateFormat=\"yyyy-MM-dd hh:mm:ss aa\"\n                            showTimeInput\n                            value={announcement.start_date}\n                        />\n                        { error.start_date == 1 ? <span className=\"error-show\">Please fill valid start date</span> : null}\n                    </div>\n                    <div className=\"col-6\">\n                        <label className=\"form-label\">\n                            <b>End Date</b>\n                        </label>\n                        <DatePicker\n                            selected={endDate}\n                            onChange={(date) => setEndDate(date)}\n                            timeInputLabel=\"Time:\"\n                            dateFormat=\"yyyy-MM-dd hh:mm:ss aa\"\n                            showTimeInput\n                            name=\"end_date_time\"\n                            value={announcement.end_date}\n                        />\n                        { error.start_date == 1 ? <span className=\"error-show\">Please fill valid end date</span> : null}\n                    </div>\n                        \n                </div>\n                {/* <div className=\"col-12 mt-3\">\n                    <div className=\"col-6 \">\n                        <label className=\"form-label\">\n                        <b>Social Media Platform</b>\n                        </label>\n                        <input type=\"text\" className=\"form-control\" value={announcement.social_platform} onChange={handleChange} name='social_platform'/>\n                        { error.social_platform == 1 ? <span className=\"error-show\">Please fill valid social Media</span> : null}\n                    </div>\n                </div> */}\n                <div className=\"col-12 mt-3\">\n                    <label className=\"form-label\">\n                    <b>Description</b>\n                    </label>\n                    <textarea\n                    className=\"form-control form-text\"\n                    id=\"exampleFormControlTextarea1\"\n                    name=\"description\"\n                    onChange={handleChange}\n                    rows=\"3\"\n                    value={announcement.description}\n                    ></textarea>\n                    { error.description == 1 ? <span className=\"error-show\">Please fill description</span> : null}\n                </div>\n                <div className=\"row mt-3\">\n                    <label className=\"form-label\">\n                    <b>Upload Avatar</b>\n                    </label>\n                    <input type=\"file\" name=\"userImage\" onChange={handleChange} />\n                </div>\n\n                { announcement.imageUrl && <img src={`${imageUrl}${announcement.imageUrl}` } />  }\n\n                <div>\n                    <button type=\"submit\" className=\"btn btn-primary form-text\">Submit</button>\n                </div>\n                \n            </form>\n        </div>\n    </>\n}\n\nexport default Announcement;"],"names":["dispatch","useDispatch","id","useParams","token","localStorage","getItem","message","useSelector","dashboardSelector","navigate","useNavigate","useEffect","toast","getAnnouncement","data","length","setAnnouncement","announcement","title","description","start_date","end_date","social_platform","imageUrl","image","useState","Image","selectedFile","setSelectedFile","startDate","setStartDate","endDate","setEndDate","error","setError","date","Date","dateStartTime","toLocaleTimeString","mnth","getMonth","slice","day","getDate","finalDate","getFullYear","join","dateEndTime","handleChange","e","target","name","value","files","size","console","log","className","to","onSubmit","preventDefault","a","announcementKey","undefined","key","formData","FormData","append","announceDataFormSubmission","type","onChange","selected","timeInputLabel","dateFormat","showTimeInput","rows","src"],"sourceRoot":""}