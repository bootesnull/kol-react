{"version":3,"file":"static/js/801.68099a39.chunk.js","mappings":"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","sources":["layout/Home/Chat/components/ContactList.js","layout/Home/Chat/components/Conversation.js","layout/Home/Chat/components/ContactDealer.js","layout/Home/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../Chat.css\";\nimport Moment from \"react-moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { getChatList } from \"../../../../slices/api/simpleApi\";\nimport {\n  conversationList,\n  chatSelector,\n} from \"../../../../slices/ChatSlice/ChatSlice\";\nconst ContactList = ({ id }) => {\n  const navigate = useNavigate();\n  const [term, setTerm] = useState(\"\");\n  const { isSuccess } = useSelector(chatSelector);\n  const [urlId, seturlId] = useState();\n  console.log(\"check\", isSuccess);\n  const dispatch = useDispatch();\n\n  let token = localStorage.getItem(\"token\");\n  const [contactList, setContactList] = useState([]);\n  useEffect(() => {\n    seturlId(id);\n  }, []);\n  console.log(\"======================================\", term);\n  // useEffect(()=>{\n  //   if(term){\n  //     let a =  contactList.filter((item,index)=>{\n  //       return item.name == term\n  //  })\n  //  setContactList([...a])\n  //   }\n\n  // },[term])\n  useEffect(() => {\n    if (!id) return;\n    handleClick(id);\n  }, [id]);\n  const handleClick = (id) => {\n    seturlId(id);\n  };\n  useEffect(() => {\n    dispatch(conversationList({ urlId, token }));\n  }, [urlId]);\n  useEffect(() => {\n    if(term){\n      let a =  contactList.filter((item,index)=>{\n        return item.name.includes(term)\n      })\n      setContactList([...a]);\n      return;\n    }\n    const callback = (data) => {\n      setContactList([...data]);\n    };\n    getChatList(callback, token);\n  }, [term]);\n\n  return (\n    <>\n      <form className=\"chat-user-search\">\n        <i className=\"bi bi-search search-icon\"></i>\n        <input\n          className=\"form-control user-search-control\"\n          type=\"text\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          onChange={(e) => setTerm(e.target.value)}\n        />\n      </form>\n      <div className=\"contact-div\">\n        <div className=\"contact-table-scroll\">\n          <div className=\"chat-users-block\">\n            {contactList &&\n              contactList.map((item, index) => {\n                return (\n                  <div\n                    key={index}\n                    className={`user-item-chat ${\n                      item.profile_id == urlId ? \"current-active\" : \"\"\n                    }`}\n                    onClick={() => handleClick(item.profile_id)}\n                  >\n                    <div className=\"user-item-thumb\">\n                      <img\n                        src={item.avatar}\n                        className=\"profile-image rounded-circle\"\n                      />\n                      <span className=\"status-icon in-active\"></span>\n                    </div>\n                    <div className=\"user-item-text\">\n                      <div className=\"user-item-row\">\n                        <span className=\"user-item-name\">{item.name}</span>\n                        <span className=\"user-item-time\">\n                          <Moment format=\"h:mm A\">{item.time}</Moment>\n                        </span>\n                      </div>\n\n                      <div className=\"user-item-last-msg\">{item.last_msg}</div>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Moment from \"react-moment\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport \"../Chat.css\";\nimport {\n  sendMessage,\n  chatSelector,\n  messageEdit,\n  messageDelete\n} from \"../../../../slices/ChatSlice/ChatSlice\";\nconst Conversation = ({ id }) => {\n  const chatData = useSelector(chatSelector);\n  // console.log(chatData.chatData);\n  let token = localStorage.getItem(\"token\");\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState(\"\");\n  const [chatList, setChatData] = useState([]);\n  const [deleteEdit, setDeleteEdit] = useState();\n  const [edit, setEdit] = useState();\n  const [editData, setEditData] = useState(\"\");\n\n  console.log(editData);\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n  };\n  let a = localStorage.getItem(\"persist:root\");\n\n  let b = JSON.parse(a);\n  let localStorageData = JSON.parse(b.user);\n  console.log(localStorageData);\n  let { username } = localStorageData;\n  useEffect(() => {\n    if (!chatData.chatData.length) {\n      setChatData([]);\n    } else {\n      setChatData([...chatData.chatData]);\n    }\n  }, [chatData]);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(sendMessage({ message, id, token }));\n    e.target.reset();\n    const newObj = {\n      avatar:\n        \"http://8ed8-203-145-168-10.in.ngrok.io/uploads/profile/16576921762043.face-sachin.jpg\",\n      message: editData,\n      name: username,\n      sent_at: new Date(),\n    };\n    setChatData([...chatList, newObj]);\n  };\n  const handleDeleteEdit = (id, message) => {\n    setDeleteEdit(id);\n\n    console.log(id, message);\n  };\n  console.log(\"==============>\", chatList);\n\n  const handleMouseOut = () => {\n    setDeleteEdit(\"\");\n  };\n  const handleEditDeleteChange = (e, id) => {\n    if (e == \"edit\") {\n      setEdit(id);\n    }\n    if (e == \"delete\") {\n      dispatch(messageDelete({token,id}))\n    }\n  };\n  const handleSaveMessage = (id) => {\n    dispatch(messageEdit({ token, editData, id }));\n\n    // const newObj1 = {\n\n    //   message: chatData,\n    //   name: username,\n    //   avatar: null,\n    //   edit_at: \"\",\n    //   last_name: null,\n    //   message_id: null,\n    //   receiver_id: null,\n    //   sender_id: null,\n    //   sent_at: \"\",\n    // };\n    \n    // setChatData([...chatList, newObj1]);\n    // setEdit(\"\");\n  };\n\n  console.log(\"jhfdgfhgfdhgfjhg\", edit);\n  return (\n    <>\n      <div className=\"chat-container\">\n        {chatList.length > 0 ? (\n          chatList.map((item, index) => {\n            return (\n              <div\n                className={`chat-row ${\n                  deleteEdit == item.message_id ? \"delete-edit-div\" : \"\"\n                }`}\n                onMouseOut={handleMouseOut}\n                onMouseOver={() =>\n                  handleDeleteEdit(item.message_id, item.message)\n                }\n              >\n                <div className=\"chat-thumb-container\">\n                  <div className=\"chat-user-thumb\">\n                    <img src={item.avatar} />\n                  </div>\n                  <span className=\"status-icon active\"></span>\n                </div>\n\n                <div className=\"chat-info-container\">\n                  <div className=\"chat-user-name\">\n                    {item.name}{\" \"}\n                    <span className=\"chat-time\">\n                      <Moment format=\"h:mm A\">{item.sent_at}</Moment>\n                    </span>\n                  </div>\n                  {edit == item.message_id ? (\n                    <div className=\"chat-message-text\">\n                      <input\n                        type=\"text\"\n                        defaultValue={item.message}\n                        onChange={(e) => setEditData(e.target.value)}\n                      />\n                      <button\n                        onClick={() => handleSaveMessage(item.message_id)}\n                      >\n                        save\n                      </button>\n                      <button onClick={() => setEdit(false)}>Cancel</button>\n                    </div>\n                  ) : (\n                    <div className=\"chat-message-text\">{item.message}</div>\n                  )}\n                </div>\n                {/* {deleteEdit == item.message_id ? (\n                  <Dropdown\n                    onSelect={(eventKey) =>\n                      handleEditDeleteChange(eventKey, item.message_id)\n                    }\n                  >\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                      Dropdown Button\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu>\n                      <Dropdown.Item eventKey=\"edit\">Edit</Dropdown.Item>\n                      <Dropdown.Item eventKey=\"delete\">Delete</Dropdown.Item>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                ) : (\n                  \"\"\n                )} */}\n              </div>\n            );\n          })\n        ) : (\n          <>\n            <div className=\"chat-row\">\n              <div className=\"chat-thumb-container\">\n                <div className=\"chat-user-thumb\">\n                  <img src=\"s\" />\n                </div>\n                <span className=\"status-icon active\"></span>\n              </div>\n\n              <div className=\"chat-info-container\">\n                <div className=\"chat-user-name\">\n                  <span className=\"chat-time\">\n                    <Moment format=\"h:mm A\"></Moment>\n                  </span>\n                </div>\n                <div className=\"chat-message-text\"></div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n      <div className=\"chat-input-container\">\n        <div>\n          <form className=\"chat-input-row\" onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              className=\"form-control chat-control\"\n              placeholder=\"Write your message here\"\n              onChange={handleChange}\n            />\n            <button type=\"submit\" className=\"chat-submit-btn\">\n              <i className=\"bi bi-send-fill\"></i>\n            </button>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Conversation;\n","import React, { useEffect, useState } from \"react\";\n\n\nimport \"../Chat.css\";\n\nconst ContactDealer = () => {\n  return (\n    <>\n      <div className=\"col-lg-12\">\n            <h5>About the Creator</h5>\n      </div>\n\n      <div className=\"chat-input-container\">\n        <div>\n          <form className=\"chat-input-row\" >\n            <input\n              type=\"text\"\n              className=\"form-control chat-control\"\n              placeholder=\"Write your message here\"\n              \n            />\n            <button type=\"submit\" className=\"chat-submit-btn\">\n              <i className=\"bi bi-send-fill\"></i>\n            </button>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ContactDealer;\n","import React, { useState } from 'react';\nimport './Chat.css';\nimport {useLocation} from \"react-router-dom\";\nimport ContactList from './components/ContactList';\nimport Conversation from './components/Conversation';\nimport ContactDealer from './components/ContactDealer';\nconst Chat = () => {\n\n  const search = useLocation().search;\n  const id = new URLSearchParams(search).get('id');\n\n  console.log(id);\n\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='col-lg-3'>\n          <div className='card'>\n            <div className='card-body p-0'>\n              <div className='chat-head-bar'>\n                <div className='chat-head-row'>\n                  <div className='chat-head-text'>\n                    <h3 className='m-0'>Chat</h3>\n                  </div>\n                  <div className='chat-head-icons'>\n                    {' '}\n                      <i className='span-icon bi bi-telephone'></i>\n                      <i className='span-icon bi bi-camera-video'></i>\n                  </div>\n                </div>\n              </div>\n              <div className='chat-bar-body'>\n                <div className='row'>\n                  <div>\n                    <ContactList id={`${id}`}/>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className='col-lg-6'>\n          <div className='card'>\n            <div className='card-body p-0'>\n              <Conversation id={`${id}`}/>\n            </div>\n          </div>\n        </div>\n\n        <div className='col-lg-3'>\n          <div className='card'>\n            <div className='card-body p-0'>\n              <ContactDealer id={`${id}`} />\n            </div>\n          </div>\n        </div>\n\n\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"names":["id","useNavigate","useState","term","setTerm","isSuccess","useSelector","chatSelector","urlId","seturlId","console","log","dispatch","useDispatch","token","localStorage","getItem","contactList","setContactList","useEffect","handleClick","conversationList","a","filter","item","index","name","includes","getChatList","data","className","type","placeholder","onChange","e","target","value","map","profile_id","onClick","src","avatar","format","time","last_msg","chatData","message","setMessage","chatList","setChatData","deleteEdit","setDeleteEdit","edit","setEdit","editData","setEditData","b","JSON","parse","localStorageData","user","username","length","handleMouseOut","message_id","onMouseOut","onMouseOver","handleDeleteEdit","sent_at","defaultValue","messageEdit","handleSaveMessage","onSubmit","preventDefault","sendMessage","reset","newObj","Date","search","useLocation","URLSearchParams","get"],"sourceRoot":""}